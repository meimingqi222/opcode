name: Build Unsigned (All Platforms)

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - '.github/workflows/build-*.yml'
      - '.github/workflows/release.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-unsigned:
    name: Build Unsigned (${{ matrix.platform.name }})
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Windows
            os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            build-args: "--bundles msi,nsis"
          - name: Linux
            os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            build-args: "--bundles deb,appimage"
          - name: macOS
            os: macos-latest
            rust-target: x86_64-apple-darwin
            build-args: "--bundles app"
    
    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Install Linux dependencies
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libglib2.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libxdo-dev
      
      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust-target }}
      
      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          key: ${{ matrix.platform.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      
      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      # Cache Bun dependencies
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun
            node_modules
          key: ${{ matrix.platform.os }}-bun-${{ hashFiles('bun.lockb', 'package.json') }}
          restore-keys: |
            ${{ matrix.platform.os }}-bun-
      
      # Install dependencies
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      # Build frontend
      - name: Build frontend
        run: bun run build
      
      # Build Tauri application (unsigned)
      - name: Build Tauri application
        run: bun run tauri build ${{ matrix.platform.build-args }}
        env:
          # Clear any signing keys to ensure unsigned build
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
      
      # Create artifacts directory for Windows
      - name: Create Windows artifacts
        if: matrix.platform.os == 'windows-latest'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "dist\${{ matrix.platform.name }}"
          
          # Copy MSI installer
          if (Test-Path "src-tauri\target\${{ matrix.platform.rust-target }}\release\bundle\msi\*.msi") {
            Copy-Item "src-tauri\target\${{ matrix.platform.rust-target }}\release\bundle\msi\*.msi" "dist\${{ matrix.platform.name }}\"
          }
          
          # Copy NSIS installer
          if (Test-Path "src-tauri\target\${{ matrix.platform.rust-target }}\release\bundle\nsis\*.exe") {
            Copy-Item "src-tauri\target\${{ matrix.platform.rust-target }}\release\bundle\nsis\*.exe" "dist\${{ matrix.platform.name }}\"
          }
          
          # Copy executable
          if (Test-Path "src-tauri\target\${{ matrix.platform.rust-target }}\release\opcode.exe") {
            Copy-Item "src-tauri\target\${{ matrix.platform.rust-target }}\release\opcode.exe" "dist\${{ matrix.platform.name }}\"
          }
      
      # Create artifacts directory for Linux
      - name: Create Linux artifacts
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          mkdir -p dist/${{ matrix.platform.name }}
          
          # Copy deb package
          if ls src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/deb/*.deb 1> /dev/null 2>&1; then
            cp src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/deb/*.deb dist/${{ matrix.platform.name }}/
          fi
          
          # Copy AppImage
          if ls src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/appimage/*.AppImage 1> /dev/null 2>&1; then
            cp src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/appimage/*.AppImage dist/${{ matrix.platform.name }}/
          fi
      
      # Create artifacts directory for macOS
      - name: Create macOS artifacts
        if: matrix.platform.os == 'macos-latest'
        run: |
          mkdir -p dist/${{ matrix.platform.name }}
          
          # Copy app bundle
          if [ -d "src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/macos/opcode.app" ]; then
            # Create a tar.gz of the app bundle
            tar -czf dist/${{ matrix.platform.name }}/opcode.app.tar.gz -C src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/macos opcode.app
          fi
          
          echo "‚ÑπÔ∏è macOS build completed without signing. For distribution, you'll need Apple Developer certificates."
      
      # Generate checksums
      - name: Generate checksums
        shell: bash
        run: |
          cd dist/${{ matrix.platform.name }}
          if [ "$(ls -A .)" ]; then
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum * > checksums.txt
            elif command -v shasum >/dev/null 2>&1; then
              shasum -a 256 * > checksums.txt
            else
              echo "No checksum utility found" > checksums.txt
            fi
          fi
      
      # List build artifacts
      - name: List build artifacts
        shell: bash
        run: |
          echo "üìÅ Build artifacts for ${{ matrix.platform.name }}:"
          if [ -d "dist/${{ matrix.platform.name }}" ]; then
            ls -la dist/${{ matrix.platform.name }}/
          else
            echo "No artifacts directory found"
          fi
      
      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}-unsigned
          path: dist/${{ matrix.platform.name }}/*
          retention-days: 7
      
      # Upload build logs on failure
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust-target }}/release/build/*/output
            src-tauri/target/${{ matrix.platform.rust-target }}/release/build/*/stderr
          retention-days: 3

  # Summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-unsigned]
    if: always()
    
    steps:
      - name: Check build results
        run: |
          if [[ "${{ needs.build-unsigned.result }}" == "failure" ]]; then
            echo "‚ùå One or more builds failed"
            exit 1
          elif [[ "${{ needs.build-unsigned.result }}" == "cancelled" ]]; then
            echo "‚ö†Ô∏è Builds were cancelled"
            exit 1
          else
            echo "‚úÖ All builds completed successfully"
            echo ""
            echo "üì¶ Available artifacts:"
            echo "‚Ä¢ Windows-unsigned: MSI installer, NSIS installer, executable"
            echo "‚Ä¢ Linux-unsigned: DEB package, AppImage"
            echo "‚Ä¢ macOS-unsigned: App bundle (tar.gz)"
            echo ""
            echo "‚ÑπÔ∏è Note: These are unsigned builds suitable for development/testing."
            echo "For distribution, you'll need proper code signing certificates."
          fi
