name: Build Windows

on:
  workflow_call:
    secrets:
      WINDOWS_CERTIFICATE:
        required: false
      WINDOWS_CERTIFICATE_PASSWORD:
        required: false
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    name: Build Windows ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          key: ${{ matrix.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun
            node_modules
          key: ${{ matrix.os }}-bun-${{ hashFiles('bun.lockb', 'package.json') }}
          restore-keys: |
            ${{ matrix.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build frontend
        run: bun run build
      
      - name: Import Windows certificate (if available)
        if: ${{ secrets.WINDOWS_CERTIFICATE != '' }}
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        shell: powershell
        run: |
          # Create variables
          $CertificatePath = "$env:RUNNER_TEMP\build_certificate.p12"
          
          # Import certificate from secrets
          [System.IO.File]::WriteAllBytes($CertificatePath, [System.Convert]::FromBase64String("$env:WINDOWS_CERTIFICATE"))
          
          # Import certificate to certificate store
          $CertPassword = ConvertTo-SecureString "$env:WINDOWS_CERTIFICATE_PASSWORD" -AsPlainText -Force
          Import-PfxCertificate -FilePath $CertificatePath -CertStoreLocation Cert:\CurrentUser\My -Password $CertPassword
          
          Write-Host "‚úÖ Certificate imported successfully"
      
      - name: Build Tauri application
        run: bun run tauri build --target ${{ matrix.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.WINDOWS_CERTIFICATE }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      
      - name: Create artifacts directory
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "dist\windows-${{ matrix.arch }}"
          
          # Copy MSI installer
          $msiPath = "src-tauri\target\${{ matrix.target }}\release\bundle\msi\*.msi"
          if (Test-Path $msiPath) {
            Copy-Item $msiPath "dist\windows-${{ matrix.arch }}\"
            Write-Host "‚úÖ MSI installer copied"
          }
          
          # Copy NSIS installer
          $nsisPath = "src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*.exe"
          if (Test-Path $nsisPath) {
            Copy-Item $nsisPath "dist\windows-${{ matrix.arch }}\"
            Write-Host "‚úÖ NSIS installer copied"
          }
          
          # Copy executable
          $exePath = "src-tauri\target\${{ matrix.target }}\release\opcode.exe"
          if (Test-Path $exePath) {
            Copy-Item $exePath "dist\windows-${{ matrix.arch }}\"
            Write-Host "‚úÖ Executable copied"
          }
          
          # Generate checksums
          $checksumFile = "dist\windows-${{ matrix.arch }}\checksums.txt"
          Get-ChildItem "dist\windows-${{ matrix.arch }}\*" -File | ForEach-Object {
            $hash = Get-FileHash $_.FullName -Algorithm SHA256
            "$($hash.Hash.ToLower())  $($_.Name)" | Out-File -Append -FilePath $checksumFile -Encoding UTF8
          }
          
          Write-Host "‚úÖ Checksums generated"
      
      - name: List build artifacts
        shell: powershell
        run: |
          Write-Host "üìÅ Build artifacts:"
          Get-ChildItem "dist\windows-${{ matrix.arch }}" -File | Format-Table Name, Length, LastWriteTime
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: dist/windows-${{ matrix.arch }}/*
          retention-days: 7
      
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-windows-${{ matrix.arch }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/build/*/output
            src-tauri/target/${{ matrix.target }}/release/build/*/stderr
          retention-days: 3
